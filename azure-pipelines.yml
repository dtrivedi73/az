# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr:
- main

variables:
- name: terraform_version
  value: '0.13.6'
parameters:
- name: enviornment
  displayName: Environment to deploy
  type: string
  default: ../vars/dev.tfvars
  values:
  - "../vars/dev.tfvars"
  - "../vars/prod.tfvars"
  - "../vars/test.tfvars"


pool:
  vmImage: 'ubuntu-18.04'

################## DEV ##################
stages:

- stage: 'terraform_plan_dev_stage'
  displayName: 'dev - Terraform Plan'
  jobs:
    - template: .ado-templates/tf_plan.yml
      parameters:
        env: 'dev'
        terraformVersion: $(terraform_version)
        svcConnName: 'devops'
        resourceGroupName: 'tfstate'
        storageAccountName: 'tfstateaz'
        containerName: 'tfstate'
        tfstateKey: 'terraform.tfstate'
        

- stage: 'terraform_apply_dev_stage'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'dev - Terraform Apply'
  jobs:
    - template: .ado-templates/tf_apply.yml
      parameters:
        env: 'dev'
        terraformVersion: $(terraform_version)
        svcConnName: 'devops'
        resourceGroupName: 'tfstate'
        storageAccountName: 'tfstateaz'
        containerName: 'tfstate'
        tfstateKey: 'terraform.tfstate'
        

# - stage: 'aks_testing_dev'
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#   displayName: 'dev - AKS Testing'
#   jobs:
#     - template: .ado-templates/aks_test.yml
#       parameters:
#         env: 'dev'
#         svcConnName: 'devops'
#         resourceGroupName: 'tfstate'
#         clusterName: 'dev-spark-aks-cluster'
#         azureSubscription: '1d205dfb-df2e-48c6-9b85-a9301092d705'

